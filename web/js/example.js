/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var TextInput = React.createClass({
    getDefaultProps: function () {
        return {
            name: 'Field',
            formns: 'form_event'
        };
    },
    getInitialState: function () {
        return {
            // значение задается в родительском классе, либо берется пустое
            value: this.props.value || '',
            error: null
        };
    },
    componentWillMount: function () {
        // подписываемся на события
        FormBus.Input.attachField.bind(this)();
    },
    componentWillUnmount: function () {
        // отписываемся от событий
        FormBus.Input.detachField.bind(this)();
    },
    setValue: function (e) {
        var component = this;
        // сохраняем в состоянии текущее значение пользовательского ввода
        this.setState({
            value: e.currentTarget.value
        }, function () {
            // отправляем событие об изменении значения
            FormBus.Input.updateField.bind(component)();
        });
    },
    render: function () {

        var error = this.state.error ? (
            <span id="name-error" className="error">{this.state.error}</span>
        ) : null;

        return (
            <div className="form-group">
                <label className="control-label">
                    {this.props.name}
                    {error}
                </label>
                <input name={this.props.name} type="text" className="form-control" onChange={this.setValue} value={this.state.value} />
            </div>
        );
    }
});

module.exports = TextInput;


var Search = React.createClass({
    render: function() {
        return (
            <tr className="search">
                <td>{this.props.data.url}</td>
                <td>{this.props.data.created_at}</td>
                <td>{this.props.data.type}</td>
                <td>{this.props.data.status}</td>
                <td>{this.props.data.resources_count}</td>
            </tr>
        );
    }
});


var SearchBox = React.createClass({
    loadSearchesFromServer: function() {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: function(data) {
                console.log(data);
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    handleCommentSubmit: function(comment) {
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.

        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function(data) {
                this.loadSearchesFromServer();
            }.bind(this),
            error: function(xhr, status, err) {
                this.setState({data: comments});
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    getInitialState: function() {
        return {data: []};
    },
    componentDidMount: function() {
        this.loadSearchesFromServer();
        setInterval(this.loadSearchesFromServer, this.props.pollInterval);
    },
    render: function() {
        console.log(this.state.data);
        return (
            <div className="searchBox">
                <h1>Search Panel</h1>
                <SearchForm onCommentSubmit={this.handleCommentSubmit} />
                <SearchList data={this.state.data} />
            </div>
        );
    }
});

var SearchList = React.createClass({
    render: function() {
        var commentNodes = this.props.data.map(function(search) {
            return (
                <Search data={search} key={search.id}></Search>
            );
        });
        return (
            <table className="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Site</th><th>Date</th><th>Search Type</th><th>Status</th><th>Resources Count</th>
                    </tr>
                </thead>
                <tbody className="SearchList">
                    {commentNodes}
                </tbody>
            </table>
        );
    }
});

var SearchForm = React.createClass({
    getInitialState: function() {
        return {url: '', text: '', type: 'img'};
    },
    handleUrlChange: function(e) {
        console.log({url: e.target.value});
        this.setState({url: e.target.value});
    },

    handleTypeChange: function(e) {
        this.setState({type: e.target.value});
    },

    handleTextChange: function(e) {
        this.setState({text: e.target.value});
    },

    handleSubmit: function(e) {
        e.preventDefault();
        var url = this.state.url.trim();
        var text = this.state.text.trim();
        var type = this.state.type.trim();
        console.log(url);
        if (!type || !url) {
            return;
        }
        this.props.onCommentSubmit({url: url, type:type, text: text});
        this.setState({url: '', text: ''});
    },

    render: function() {
        return (
            <form className="SearchForm" onSubmit={this.handleSubmit}>
                <div className="form-group">
                    <input
                        className="form-control"
                        type="text"
                        placeholder="Site search"
                        value={this.state.author}
                        onChange={this.handleUrlChange}
                    />
                </div>
                <div className="form-group">
                    <label className="radio-inline">
                        <input type="radio" name="type" value="img"  onChange={this.handleTypeChange}/>Img
                    </label>
                    <label className="radio-inline">
                        <input type="radio" name="type" value="link" onChange={this.handleTypeChange}/>Link
                    </label>
                    <label className="radio-inline">
                        <input type="radio" name="type" value="text" onChange={this.handleTypeChange} />Text
                    </label>
                </div>

                {this.state.type == 'text' ?
                    <div className="form-group">
                        <input
                            className="form-control"
                            type="text"
                            placeholder="Say something..."
                            value={this.state.text}
                            onChange={this.handleTextChange}
                        />
                    </div>
                : null}
                <div className="form-group">
                    <input className="btn btn-primary" type="submit" value="Find" />
                </div>
            </form>
        );
    }
});

ReactDOM.render(
    <SearchBox url="/api/search?sort=-created_at" pollInterval={2000} />,
    document.getElementById('content')
);